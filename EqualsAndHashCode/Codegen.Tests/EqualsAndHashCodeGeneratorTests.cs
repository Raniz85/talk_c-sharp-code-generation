using System.Data;
using System.Linq;
using Codegen.Tests.Utils;
using FluentAssertions;
using Microsoft.VisualStudio.TestPlatform.CommunicationUtilities;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using Xunit;

namespace Codegen.Tests;

public class EqualsAndHashCodeGeneratorTests
{
    [Theory]
    [InlineData([@"[EqualsAndHashCode]"])]
    public void ThatPartialClassWithEqualsAndHashCodeIsGenerated(string attribute)
    {
        // Given a source code generator
        var generator = new EqualsAndHashCodeGenerator();
        
        // And a source file that should trigger source generation
        var source = $@"
        using Codegen;
        using Aliased = Codegen.EqualsAndHashCode;

        namespace Test;

        {attribute}
        public partial class Person {{
            public string FirstName {{ get; }}
            public string LastName {{ get; }}
            public string FullName => $""{{FirstName}} {{LastName}}""
            private int age;
            
            public void SayName()
            {{
                Console.WriteLine(this.FullName);
            }}
        }}
        ";
        
        // When source code generation is run
        var generatedSources = generator.RunSourceGenerator(source);
        
        // Then a partial implementation containing a message method is generated
        generatedSources.Should().ContainKey("Codegen/Codegen.EqualsAndHashCodeGenerator/Person.EqualsAndHashCode.cs")
            .WhoseValue.Trim().Should().Be($@"
// <auto-generated/>

namespace Test;

public partial class Person
{{
    public bool Equals(Person? other)
    {{
        return other != null && Object.Equals(this.FirstName, other.FirstName) && Object.Equals(this.LastName, other.LastName) && Object.Equals(this.age, other.age);
    }}

    public override bool Equals(object other)
    {{
        return other is Person o && this.Equals(o);
    }}

    public override int GetHashCode()
    {{
        return HashCode.Combine(this.FirstName, this.LastName, this.age);
    }}
}}
".Trim());
    }
}