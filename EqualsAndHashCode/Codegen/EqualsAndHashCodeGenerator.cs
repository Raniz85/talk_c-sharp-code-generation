using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Codegen;

[Generator]
public class EqualsAndHashCodeGenerator : IIncrementalGenerator
{
    private const string AttributeSourceCode = @"
// <auto-generated/>

namespace Codegen;

[System.AttributeUsage(System.AttributeTargets.Class)]
public class EqualsAndHashCodeAttribute: System.Attribute
{
}";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            "EqualsAndHashCodeAttribute",
            SourceText.From(AttributeSourceCode, Encoding.UTF8)));


        var classes = context.SyntaxProvider.ForAttributeWithMetadataName(
                "Codegen.EqualsAndHashCodeAttribute",
                predicate: (_, _) => true,
                transform: (context, _) => context.TargetNode as ClassDeclarationSyntax)
            .Where(static node => node is not null)
            .Collect()
            .Combine(context.CompilationProvider);
        
        context.RegisterSourceOutput(classes,
            static (context, pair) =>
            {
                var (classes, compilation) = pair;
                foreach (var cls in classes)
                {
                    new ImplementationGenerator(cls!, context, compilation).GenerateSourceCode();
                }
            });
    }

}