using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Codegen;

[Generator]
public class EqualsAndHashCodeGenerator: IIncrementalGenerator
{
    public const string Namespace = "Codegen";
    public const string AttributeName = "EqualsAndHashCode";

    private const string AttributeSourceCode = $@"// <auto-generated/>

namespace {Namespace}
{{
    [System.AttributeUsage(System.AttributeTargets.Class)]
    public class {AttributeName} : System.Attribute
    {{
    }}
}}";
    
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Add the marker attribute to the compilation.
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            $"{AttributeName}",
            SourceText.From(AttributeSourceCode, Encoding.UTF8)));

        // Locate and register generators for all classes marked with the marker attribute
        var classes = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (s, _) => IsClassWithAttributes(s),
                transform: static (context, _) => context.Node as ClassDeclarationSyntax
            )
            .Where(static node => node is not null)
            .Collect()
            .Combine(context.CompilationProvider);

        // Execute all the generators to generate source code
        context.RegisterSourceOutput(classes,
            static (context, pair) =>
            {
                var (classes, compilation) = pair;
                foreach (var cls in classes)
                {
                    new EqualsAndHashCodeImplementation(cls!, context, compilation).GenerateSourceCode();
                }
            });
    }

    /// <summary>
    /// Check if a node is a class declaration syntax with at least one attribute
    /// </summary>
    /// <param name="syntaxNode"></param>
    /// <returns></returns>
    private static bool IsClassWithAttributes(SyntaxNode syntaxNode)
    {
        return syntaxNode is ClassDeclarationSyntax classNode
               && classNode.AttributeLists
                   .SelectMany(list => list.Attributes)
                   .Any();
    }
}